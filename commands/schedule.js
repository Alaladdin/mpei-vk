const { format, add } = require('../util/pdate');
const { serverDateFormat } = require('../config');
const pschedule = require('../functions/schedule');

module.exports = {
  name: 'schedule',
  description: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å',
  aliases: ['s', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—Ä'],
  usage: '',
  arguments: [
    {
      name: 'tw',
      description: '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
    },
    {
      name: 'week',
      description: '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é',
    },
  ],
  async execute(ctx, args) {
    const today = format(new Date(), serverDateFormat);
    const tomorrow = format(add(new Date()), serverDateFormat);

    const [command] = args;

    const argsInstructions = {
      week: {
        name: '–Ω–µ–¥–µ–ª—é',
      },
      tw: {
        name: '–∑–∞–≤—Ç—Ä–∞',
        start: tomorrow,
        finish: tomorrow,
      },
      empty: {
        name: '—Å–µ–≥–æ–¥–Ω—è',
        start: today,
        finish: today,
      },
    };

    if (command && (command === 'empty' || !argsInstructions[command])) {
      ctx.reply(`–Ω–µ –∑–Ω–∞—é, —á—Ç–æ –∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∞–∫–æ–π "${command}"`);
      return;
    }

    const selectedDate = argsInstructions[!args.length ? 'empty' : command];
    const { schedule } = await pschedule.get(selectedDate) || {};

    if (typeof schedule !== 'object' && !Array.isArray(schedule)) {
      await ctx.send('–ï–±–∞–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –ú–≠–ò —Å–Ω–æ–≤–∞ –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç');
      return;
    }

    await ctx.send(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${selectedDate.name}`);

    // if schedule data exists
    if (Array.isArray(schedule) && schedule.length <= 0) {
      ctx.send('–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üòé');
      return;
    }

    schedule.forEach((item) => {
      const itemData = [];
      const {
        date,
        discipline,
        dayOfWeekString,
        kindOfWork,
        beginLesson,
        endLesson,
        lecturer,
      } = item;

      itemData.push(`[${dayOfWeekString}] ${discipline} - ${format(date)}`);
      itemData.push(kindOfWork);
      itemData.push(`${beginLesson} - ${endLesson}`);
      itemData.push(lecturer);

      return ctx.send(itemData.join('\n'));
    });
  },
};
